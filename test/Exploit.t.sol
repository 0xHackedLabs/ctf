// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {Exploit as RandomExploit } from "../src/Demo/Exploit.sol";
import {Exploit as AoE} from "../src/AdultOtter/Exploit1.sol";
import {Exploit as BoE} from "../src/BabyOtter/Exploit2.sol";
import {Exploit as BdE} from "../src/Bytedance/Exploit3.sol";
import {Exploit as CoE} from "../src/ChildOtter/Exploit4.sol";
import {Exploit as EyE} from "../src/EasyECDSA/Exploit5.sol";
import {Exploit as FlE} from "../src/Factorial/Exploit6.sol";
import {Exploit as SnE} from "../src/Snakes/Exploit7.sol";
import {Exploit as SpE} from "../src/StakePool/Exploit8.sol";
import {StakePool} from "../src/StakePool/StakePool.sol";


interface IChallenge {
    function solved() external returns(bool);
}


contract ExploitTest is Test {

    function setUp() public {
        // fork the ctf chain
        vm.createSelectFork("http://127.0.0.1:8545", 3);
    }

    function test_random() public {
        address target = 0xDA879713a32894B3a0Ce42c70Bcd4331e1652e54; // the Random contract address

        // write the Exploit contract
        RandomExploit exp = new RandomExploit();
        exp.exploit();

        assertTrue(IChallenge(target).solved());
        // then use https://www.0xhacked.com/tool or https://github.com/0xHackedLabs/zkProver to generate zkp
    }

    function test_adultotter() public {
        address target = 0x6D40aCf2EF8F8F99247666AEE922E79CB605DE3B;
        AoE exp = new AoE();
        exp.exploit();

        assertTrue(IChallenge(target).solved());
    }
    
    function test_babyotter() public {
        address target = 0x4e309C767Acc9f9366d75C186454ed205d5Eeee3;

        BoE exp = new BoE();
        exp.exploit();
        assertTrue(IChallenge(target).solved());
    }

    function test_bytedance() public {
        address target = 0x2eB0fCb87fe17e7a2aB93B6d51C0A72D9dbA6bdC;
        BdE exp = new BdE();
        exp.exploit();
        assertTrue(IChallenge(target).solved());
    }

    function test_childotter() public {
        address target = 0x63461D5b5b83bD9BA102fF21d8533b3aad172116;
        CoE exp = new CoE();
        exp.exploit();
        assertTrue(IChallenge(target).solved());
    }

    function test_easyecdsa() public {
        address target = 0xaf1c3f65ac4767cBFB3417A7a26d95cECcb96F37;
        EyE exp = new EyE();
        exp.exploit();
        assertTrue(IChallenge(target).solved());
    }

    function test_factorial() public {
        address target = 0x1963ead4de36524e8EB53B88ccf79ff15Fe20baB;
        FlE exp = new FlE();
        exp.exploit();
        assertTrue(IChallenge(target).solved());
    }

    function test_snakes() public {
        address target = 0x827bB86B1594C77C9Ef9c126Bf1b0D46DC81aEEA;
        SnE exp = new SnE();
        exp.exploit();
        assertTrue(IChallenge(target).solved());
    }

    function test_stakepool() public {

        address target = 0x511978e46Fc117795431f7493fB5288592097C4A;
        SpE exp = new SpE();
        exp.exploit();
        assertTrue(IChallenge(target).solved());
    }
}
